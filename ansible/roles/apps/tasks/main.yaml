---
- name: Import facts
  ansible.builtin.include_role:
    name: "{{ item }}"
    tasks_from: facts
  loop:
    - k3s

- name: Role Provisioning
  when: ansible_host in k3s_server_hosts
  block:
    - name: Validate service state
      ansible.builtin.wait_for:
        port: "{{ k3s_vars.server.api.port }}"
        state: started
        timeout: 30
      any_errors_fatal: true

    - name: Create namespaces if they don't exist
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: "{{ k3s_vars.directory.config }}/k3s.yaml"
      loop: "{{ apps }}"
      loop_control:
        loop_var: item

    - name: Create ArgoCD Applications
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', item + '.argo-app.j2') | from_yaml }}"
        kubeconfig: "{{ k3s_vars.directory.config }}/k3s.yaml"
        state: present
        apply: true
        wait: true
      loop: "{{ apps }}"
      loop_control:
        loop_var: item

    - name: Create Secrets for Apps
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', item + '.secrets.j2', errors='ignore') | default('', true) | from_yaml_all | list }}"
        kubeconfig: "{{ k3s_vars.directory.config }}/k3s.yaml"
        wait: true
      loop: "{{ apps }}"
      loop_control:
        label: "{{ item }}"
      when: lookup('ansible.builtin.template', item + '.secrets.j2', errors='ignore') | default('', true) | trim != ''

    - name: Create SecretStore for Apps
      kubernetes.core.k8s:
        kubeconfig: "{{ k3s_vars.directory.config }}/k3s.yaml"
        wait: true
        definition:
          apiVersion: external-secrets.io/v1beta1
          kind: ClusterSecretStore
          metadata:
            name: "{{ item }}-secret-store"
          spec:
            provider:
              kubernetes:
                remoteNamespace: "{{ item }}"
                server:
                  caProvider:
                    type: ConfigMap
                    namespace: kube-system
                    name: kube-root-ca.crt
                    key: ca.crt
                auth:
                  serviceAccount:
                    name: external-secrets
                    namespace: kube-system
      loop: "{{ apps }}"
      loop_control:
        loop_var: item
