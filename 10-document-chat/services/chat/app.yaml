spec:
  name: document-chat-service-chat
  autoSync: true
  source:
    chart: backend-service
    repoURL: harbor.konsti.org/library
    targetRevision: 0.9.3
    helm:
      releaseName: service-chat
      valuesObject:
        nameOverride: service-chat
        image:
          repository: harbor.konsti.org/library/backend-service-chat
          tag: "2024.38"
        service:
          port: 8092
        env:
          LOG_LEVEL: info
          AZURE_OPENAI_API_DEPLOYMENT_NAME: gpt-35-turbo
          AZURE_OPENAI_API_VERSION: 2023-05-15
          INGESTION_API_URL: 'http://service-ingestion.document-chat.svc:8091'
          SCOPE_MANAGEMENT_API_URL: 'http://service-scope-management.document-chat.svc:8094'
          PUBSUB_BACKEND: redis
          PUBSUB_REDIS_DB: 2
          PUBSUB_REDIS_HOST: document-chat-redis-master
          PUBSUB_REDIS_PORT: '6379'
          BENCHMARKS_PER_MINUTE_PER_PROCESS: "1"
          AMQP_BENCHMARK_PREFETCH: "1"
          INTERNAL_MODULES_CONFIG: >- 
            [
            ]
          AZURE_OPENAI_API_ENDPOINTS_JSON: >-
            {
              "gpt-35-turbo-0301": ["https://llm-cluster.konsti.org/"],
              "gpt-35-turbo-0613": ["https://llm-cluster.konsti.org/"],
              "gpt-35-turbo-16k-0613": ["https://llm-cluster.konsti.org/"],
              "gpt-4-0613": ["https://llm-cluster.konsti.org/"],
              "gpt-4-32k-0613": ["https://llm-cluster.konsti.org/"],
              "gpt-4-1106-Preview": ["https://llm-cluster.konsti.org/"],
              "gpt-4-vision-preview": ["https://llm-cluster.konsti.org/"],
              "gpt-35-turbo-instruct-0914": [],
              "gpt-4-turbo-2024-04-09": ["https://llm-cluster.konsti.org/"],
              "gpt-4o-2024-05-13": ["https://llm-cluster.konsti.org/"],
              "gpt-4o-mini-2024-07-18": ["https://llm-cluster.konsti.org/"],
              "gpt-4o-2024-08-06": ["https://llm-cluster.konsti.org/"]
            }
          CORS_ALLOWED_ORIGINS: '["https://app.konsti.org"]' # TODO: Remove this once we have proper CORS management in place
          S3_BUCKET_ENDPOINT: 'http://rook-ceph-rgw-ceph-objectstore.rook-ceph.svc:80'
          S3_BUCKET_REGION: 'us-east-1'
          S3_BUCKET_NAME: 'chat-storage-bucket'
        replicaCount: 1
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            memory: 2Gi
        hooks:
          migration:
            enabled: true
            command: |
              cd /node/dist/apps/node-chat; npx prisma migrate deploy
        httproute:
          enabled: true
          hostnames:
            - api.konsti.org
          annotations:
            konghq.com/strip-path: "true"
            konghq.com/plugins: unique-jwt-auth
          rules:
            - matches:
                - path:
                    type: PathPrefix
                    value: /chat
        objectBucketClaims:
          enabled: true
          buckets:
            - name: chat-storage-bucket
        externalSecret:
          enabled: true
          refreshInterval: 5m
          secretStoreRef:
            kind: ClusterSecretStore
            name: document-chat-secret-store
          target:
            template:
              data:
                AMQP_URL: "amqp://{{ .rabbitmqUsername }}:{{ .rabbitmqPassword }}@{{ .rabbitmqHost }}:{{ .rabbitmqPort }}"
                DATABASE_URL: "postgresql://{{ .postgresUsername }}:{{ .postgresPassword }}@{{ .postgresHost }}:{{ .postgresPort }}/chat"
                CHAT_LXM_ENCRYPTION_KEY: "{{ .lxmEncryptionKey }}"
                S3_BUCKET_ACCESS_KEY: "{{ .chatStorageBucketAccessKey }}"
                S3_BUCKET_SECRET_ACCESS_KEY: "{{ .chatStorageBucketSecretKey }}"
          data:
            - secretKey: rabbitmqPassword
              remoteRef:
                key: rabbitmq-default-user
                property: password
            - secretKey: rabbitmqUsername
              remoteRef:
                key: rabbitmq-default-user
                property: username
            - secretKey: rabbitmqHost
              remoteRef:
                key: rabbitmq-default-user
                property: host
            - secretKey: rabbitmqPort
              remoteRef:
                key: rabbitmq-default-user
                property: port
            - secretKey: postgresPassword
              remoteRef:
                key: chat-database-user-sql
                property: password
            - secretKey: postgresUsername
              remoteRef:
                key: chat-database-user-sql
                property: username
            - secretKey: postgresHost
              remoteRef:
                key: postgres-cluster-binding
                property: host
            - secretKey: postgresPort
              remoteRef:
                key: postgres-cluster-binding
                property: port
            - secretKey: lxmEncryptionKey
              remoteRef:
                key: document-chat-secrets
                property: CHAT_LXM_ENCRYPTION_KEY
            - secretKey: chatStorageBucketAccessKey
              remoteRef:
                key: chat-storage-bucket
                property: AWS_ACCESS_KEY_ID
            - secretKey: chatStorageBucketSecretKey
              remoteRef:
                key: chat-storage-bucket
                property: AWS_SECRET_ACCESS_KEY