spec:
  name: document-chat-service-ingestion
  autoSync: true
  source:
    chart: backend-service
    repoURL: harbor.konsti.org/library
    targetRevision: 0.9.3
    helm:
      releaseName: service-ingestion
      valuesObject:
        nameOverride: service-ingestion
        image:
          repository: harbor.konsti.org/library/backend-service-ingestion
          tag: "2024.38"
        service:
          port: 8091
        env:
          LOG_LEVEL: info
          AZURE_OPENAI_API_DEPLOYMENT_NAME: foobar
          AZURE_OPENAI_API_VERSION: 2024-05-13
          SCORE_THRESHOLD: 0
          AUDIT_LOG_DESTINATION: '/dev/null'
          SCOPE_MANAGEMENT_URL: 'http://service-scope-management.document-chat.svc:8094'
          CHAT_URL: 'http://service-chat.document-chat.svc:8092'
          MAX_HEAP_MB: 400
          ENABLE_MALWARE_SCAN: 'false'
          REPLICATION_FACTOR: 1
          FILE_RETENTION_IN_DAYS: 0
          ADDITIONAL_INGESTION_QUEUES: '["chat_queue"]'
          ZITADEL_PROJECT_ID: 'null' # Not required any more, as Kong extracts roles from JWT
          ZITADEL_ROOT_ORG_ID: 'null' # Required for maintenance tasks. Needs to be set to the CLUSTER_IAM org_id to allow maintenance tasks.
          USE_SCOPE_MANAGEMENT: 'true'
          CORS_ALLOWED_ORIGINS: '["https://app.konsti.org"]' # TODO: Remove this once we have proper CORS management in place
          INGESTION_UPLOAD_API_URL: 'https://api.konsti.org/ingestion/upload'
          RERANKER_CONFIGURATION: '[{"deploymentName": "crossencoder_reranker", "apiUrl": "http://assistants-reranker.python.svc:8081/reranker/rerank"}]'
          S3_BUCKET_ENDPOINT: 'http://rook-ceph-rgw-ceph-objectstore.rook-ceph.svc:80'
          S3_BUCKET_REGION: 'us-east-1'
          S3_BUCKET_NAME: 'ingestion-storage-bucket'
          AZURE_OPENAI_API_KEY: 'key' # TODO: Replace with our custom LLM creds
          AZURE_OPENAI_API_ENDPOINT: 'https://llm-cluster.konsti.org/'
          TRUSTED_DOMAINS: '["*.konsti.org"]'
        replicaCount: 1
        resources:
          requests:
            cpu: 200m
            memory: 500Mi
          limits:
            memory: 1Gi
        hooks:
          migration:
            enabled: true
            command: |
              cd /node/dist/apps/node-ingestion; npx prisma migrate deploy
        httproute:
          enabled: true
          hostnames:
            - api.konsti.org
          annotations:
            konghq.com/strip-path: "true"
            konghq.com/plugins: unique-jwt-auth
          rules:
            - matches:
                - path:
                    type: PathPrefix
                    value: /ingestion
        objectBucketClaims:
          enabled: true
          buckets:
            - name: ingestion-storage-bucket
        externalSecret:
          enabled: true
          refreshInterval: 5m
          secretStoreRef:
            kind: ClusterSecretStore
            name: document-chat-secret-store
          target:
            template:
              data:
                AMQP_URL: "amqp://{{ .rabbitmqUsername }}:{{ .rabbitmqPassword }}@{{ .rabbitmqHost }}:{{ .rabbitmqPort }}"
                DATABASE_URL: "postgresql://{{ .postgresUsername }}:{{ .postgresPassword }}@{{ .postgresHost }}:{{ .postgresPort }}/ingestion?pgbouncer=true"
                QDRANT_URL: 'http://qdrant.qdrant.svc:6333'
                S3_BUCKET_ACCESS_KEY: "{{ .chatStorageBucketAccessKey }}"
                S3_BUCKET_SECRET_ACCESS_KEY: "{{ .chatStorageBucketSecretKey }}"
                INGESTION_ENCRYPTION_KEY: "{{ .ingestionEncryptionKey }}"
          data:
            - secretKey: rabbitmqPassword
              remoteRef:
                key: rabbitmq-default-user
                property: password
            - secretKey: rabbitmqUsername
              remoteRef:
                key: rabbitmq-default-user
                property: username
            - secretKey: rabbitmqHost
              remoteRef:
                key: rabbitmq-default-user
                property: host
            - secretKey: rabbitmqPort
              remoteRef:
                key: rabbitmq-default-user
                property: port
            - secretKey: postgresPassword
              remoteRef:
                key: chat-database-user-sql
                property: password
            - secretKey: postgresUsername
              remoteRef:
                key: chat-database-user-sql
                property: username
            - secretKey: postgresHost
              remoteRef:
                key: postgres-cluster-binding
                property: host
            - secretKey: postgresPort
              remoteRef:
                key: postgres-cluster-binding
                property: port
            - secretKey: chatStorageBucketAccessKey
              remoteRef:
                key: ingestion-storage-bucket
                property: AWS_ACCESS_KEY_ID
            - secretKey: chatStorageBucketSecretKey
              remoteRef:
                key: ingestion-storage-bucket
                property: AWS_SECRET_ACCESS_KEY
            - secretKey: ingestionEncryptionKey
              remoteRef:
                key: document-chat-secrets
                property: INGESTION_ENCRYPTION_KEY
